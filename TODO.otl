[_] MVP
  [X] backend classes
    [X] site
    [X] app
    [X] cookbook
    [X] repository
  [_] commands
    [X] choose cmdline app library
      : ***** http://www.rubydoc.info/gems/commander/4.3.0
      : http://cmdparse.gettalong.org/tutorial.html
    [X] shak apply
      :sudo chef-solo # allowed via sudoers to shak-admin
    [X] shak add-site SITE
    [_] shak add-app SITE APP PATH
    [_] shak self-setup # postinst (?)
      : this should probaby be in a proper chef recipe
      [_] needs to run as root
      [_] create groups
      [_] create/init data dir
      [_] create/init tmp/log dirs
  [_] nginx by default
  [_] Procfile
  [_] vagrant
  [_] initial apps
    [_] redmine
    [_] email server
    [_] static website (?)
  [_] web UI
    [_] basic setup (?)
    [_] add site
    [_] add app
  [_] daemon
    : listens for changes to the store and calls the equivalent of `shak
    : apply`
[_] Later
  [_] data store in git
  [_] groups shak-user, shak-admin
    [_] create git data store with --shared
    [_] postinst
    [X] allow chef-solo as root to shak-admin
  [_] commands
    [_] shak site remove SITE
    [_] shak app remove SITE APP [PATH]
    [_] shak diff
    [_] shak log
  [_] security ratings
    [_] * to *****
  [_] security guidelines
    : run each app for each site as its own user; reverse prozy theough nginx
  [_] enforce ssl everywhere
  [_] auto dns setup
    [_] register domain programatically
  [_] solve as much as possible of issues on the packages
    [_] keep cookbooks as trivia as ossible
  [_] all commands from webapp run as the users who issued them
    [_] webapp users are system users
  [_] backup everything
    [_] encrypted locally if sent out
  [X] cookbook
  [X] ./dev wrapper
  [_] desktop client
    connects to server via SSH
    installs shak if needed
    browses to shak web UI via SSH tunnel
